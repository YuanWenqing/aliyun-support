buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
}

// project setting
subprojects {
    group = "xyz.codemeans.aliyun4j"

    repositories {
        mavenLocal()
        mavenCentral()
    }

    apply plugin: "java"
    apply plugin: "java-library"
    apply plugin: "jacoco"

    // artifacts
    jar << {
        println "jar: ${archivePath}"
    }
    task sourcesJar(type: Jar, dependsOn: classes) {
        from sourceSets.main.allJava
        classifier = 'sources'
        doLast {
            println "sources: ${archivePath}"
        }
    }
    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
        doLast {
            println "sources: ${archivePath}"
        }
    }

    jacocoTestReport.dependsOn(test)
    jacocoTestReport << {
        println jacocoTestReport.reports.html.entryPoint
    }

    test << {
        println test.reports.html.entryPoint
    }

    apply plugin: "maven-publish"
    publishing {
        repositories {
            maven {
                name "oss"
                def ossSnapshotRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots"
                def ossStagingRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
                url = project.hasProperty("release") ? ossStagingRepoUrl : ossSnapshotRepoUrl
                credentials {
                    username property("maven2.username")
                    password property("maven2.password")
                }
            }
        }
        publications {
            mavenJava(MavenPublication) {
                from components.java

                if (project.hasProperty("release")) {
                    version = project.getVersion()
                } else {
                    version = project.getVersion() + "-SNAPSHOT"
                }

                artifact sourcesJar
                artifact javadocJar

                pom {
                    name = 'Aliyun4J'
                    url = 'https://github.com/YuanWenqing/aliyun4j'
                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    developers {
                        developer {
                            id = 'yuanwq'
                            name = 'YuanWenqing'
                            email = 'ywq8876@163.com'
                        }
                    }
                    scm {
                        connection = 'scm:git:git://github.com:YuanWenqing/aliyun4j.git'
                        developerConnection = 'scm:git:ssh://github.com:YuanWenqing/aliyun4j.git'
                        url = 'https://github.com/YuanWenqing/aliyun4j'
                    }
                }
            }
        }
    }
    publish {
        doLast {
            def pub = publishing.publications.mavenJava
            println "artifact: ${pub.groupId}:${pub.artifactId}:${pub.version}"
            for (repo in publishing.repositories) {
                println "upload to ${repo.url}"
            }
        }
    }
    publishToMavenLocal {
        doLast {
            def pub = publishing.publications.mavenJava
            println "artifact: ${pub.groupId}:${pub.artifactId}:${pub.version}"
        }
    }
    task('local').dependsOn(publishToMavenLocal)

    apply plugin: "signing"  // generate a signature file for each artifact
    signing {
        sign publishing.publications.mavenJava
    }


    dependencies {
        //annotationProcessor("org.projectlombok:lombok:$lombokVersion")
        compileOnly("org.projectlombok:lombok:$lombokVersion")

        // log
        api("org.slf4j:slf4j-api:$slf4jVersion")

        // test
        testImplementation("junit:junit:$junitVersion")
        testImplementation("org.slf4j:slf4j-log4j12:$slf4jVersion")
        testImplementation("log4j:log4j:$log4jVersion")
    }
}

