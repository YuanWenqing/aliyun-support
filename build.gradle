buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
}

group = "xyz.codemeans.aliyun4j"
version = '1.0.0'

repositories {
    mavenLocal()
    mavenCentral()
}

apply plugin: "java"
apply plugin: "java-library"
apply plugin: "jacoco"

// artifacts
jar << {
    println "jar: ${archivePath}"
}
task sourcesJar(type: Jar, dependsOn: classes) {
    from sourceSets.main.allJava
    classifier = 'sources'
    doLast {
        println "sources: ${archivePath}"
    }
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
    doLast {
        println "sources: ${archivePath}"
    }
}

jacocoTestReport.dependsOn(test)
jacocoTestReport << {
    println jacocoTestReport.reports.html.entryPoint
}

test << {
    println test.reports.html.entryPoint
}

dependencies {
    //annotationProcessor("org.projectlombok:lombok:$lombokVersion")
    compileOnly("org.projectlombok:lombok:$lombokVersion")

    // log
    implementation("org.slf4j:slf4j-api:$slf4jVersion")

    api("com.aliyun.opensearch:aliyun-sdk-opensearch:$aliyunOpensearchVersion") {
        transitive = false
        exclude group: "org.slf4j", module: "slf4j-nop"
    }
    api "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
    implementation "com.google.guava:guava:$guavaVersion"
    implementation "org.apache.commons:commons-lang3:$commonsLang3Version"
    implementation "org.apache.httpcomponents:httpclient:$httpclientVersion"

    // test
    testImplementation("junit:junit:$junitVersion")
    testImplementation("org.slf4j:slf4j-log4j12:$slf4jVersion")
    testImplementation("log4j:log4j:$log4jVersion")
}


apply plugin: "maven-publish"
publishing {
    repositories {
        maven {
            name "oss"
            def ossSnapshotRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots"
            def ossStagingRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            url = project.hasProperty("release") ? ossStagingRepoUrl : ossSnapshotRepoUrl
            credentials {
                username property("maven2.username")
                password property("maven2.password")
            }
        }
    }
    publications {
        mavenJava(MavenPublication) {
            from components.java

            if (project.hasProperty("release")) {
                version = project.getVersion()
            } else {
                version = project.getVersion() + "-SNAPSHOT"
            }

            artifact sourcesJar
            artifact javadocJar

            pom {
                name = "Opensearch4j: A Easy-Used Facility Library For Aliyun Opensearch"
                description = "Java SDK for Aliyun Opensearch library with secondary wrapping, more EASY to use!"
                url = 'https://github.com/YuanWenqing/opensearch4j'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'yuanwq'
                        name = 'YuanWenqing'
                        email = 'ywq8876@163.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com:YuanWenqing/opensearch4j.git'
                    developerConnection = 'scm:git:ssh://github.com:YuanWenqing/opensearch4j.git'
                    url = 'https://github.com/YuanWenqing/opensearch4j'
                }
            }
        }
    }
}
publish {
    doLast {
        def pub = publishing.publications.mavenJava
        println "artifact: ${pub.groupId}:${pub.artifactId}:${pub.version}"
        for (repo in publishing.repositories) {
            println "upload to ${repo.url}"
        }
    }
}
publishToMavenLocal {
    doLast {
        def pub = publishing.publications.mavenJava
        println "artifact: ${pub.groupId}:${pub.artifactId}:${pub.version}"
    }
}
task('local').dependsOn(publishToMavenLocal)

apply plugin: "signing"  // generate a signature file for each artifact
signing {
    sign publishing.publications.mavenJava
}

